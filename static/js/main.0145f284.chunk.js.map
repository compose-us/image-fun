{"version":3,"sources":["images/logo.png","component/dialog/dialog.module.css","component/solution-display/solution-display.module.css","component/splash/splash.module.css","component/compound-word-display/compound-word-display.module.css","component/how-to-play/how-to-play.module.css","component/letter-input/letter-input.module.css","component/button/button.module.css","lib/get-unsplash-image/get-unsplash-image.ts","context/game-settings-context/game-settings-context.tsx","service/pairs.ts","lib/pair-generator/pair-generator.ts","context/game-state-context/game-state-context.tsx","context/context-providers.tsx","component/dialog/dialog.tsx","component/compound-word-display/compound-word-display.tsx","component/hint-display/hint-display.tsx","lib/get-hint-from-words/get-hint-from-word.ts","lib/get-hint-from-words/get-hint-from-words.ts","component/hint-dialog/hint-dialog.tsx","component/hint-button/hint-button.tsx","component/letter-input/letter-input.tsx","component/validation-dialog/validation-dialog.tsx","component/solution-display/solution-display.tsx","component/solution-dialog/solution-dialog.tsx","component/solution-button/solution-button.tsx","component/image/image.tsx","service/get-window-size.ts","lib/retrieve-images/retrieve-images.ts","component/button/button.tsx","component/game/game.tsx","component/layout/partial/footer/footer.tsx","component/how-to-play/how-to-play.tsx","component/splash/splash.tsx","component/app-switch/app-switch.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getUnsplashImage","height","keyword","width","url","uuid","v4","defaultValues","backgroundImage","GameSettingsContext","React","createContext","GameSettingsProvider","children","useState","state","setState","useEffect","window","innerWidth","innerHeight","Provider","value","useGameSettings","useContext","listOfPairs","pairGenerator","Math","floor","random","length","defaultErrorMessage","Date","now","showHint","showSolver","compoundWord","toggleHint","Error","toggleSolver","resetCompoundWord","GameStateContext","GameStateProvider","useCallback","oldState","newCompoundWord","useGameState","ContextProviders","Fragment","Dialog","animate","close","message","title","className","style","root","onClick","e","target","currentTarget","content","party","autoFocus","CompoundWordDisplay","letters","word","split","styles","map","letter","index","key","tabIndex","type","input","disabled","readOnly","HintDisplay","secrets","display","flexWrap","secret","getHintFromWord","amountOfHintChars","replace","chars","indices","_","idx","hint","i","selectedIndex","toUpperCase","filter","join","getHintFromWords","word1","word2","HintDialog","callback","onClose","words","first","second","useMemo","HintButton","hKeyListener","event","code","document","addEventListener","removeEventListener","aria-label","LetterInput","forwardRef","ref","onChange","undefined","onKeyDown","maxLength","onFocus","setSelectionRange","ValidationDialog","active","solved","SolutionDisplay","solution","history","useHistory","validate","setValidation","letterRefs","useRef","addToRef","element","current","includes","push","defaultUserInput","Array","fill","userInput","setUserInput","focus","onSubmit","preventDefault","_space","spacer","slice","keyCode","toLowerCase","go","SolutionDialog","SolutionButton","Image","src","alt","margin","getWindowSize","retrieveImages","fallbackGetWindowSize","fallbackGetUnsplashImage","sizeX","ceil","sizeY","Button","to","label","Game","images","flexDirection","justifyContent","alignItems","textAlign","image","Footer","href","rel","HowToPlay","backgroundPosition","backgroundRepeat","backgroundSize","card","logo","Splash","actions","AppSwitch","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0145f284.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cfcd6516.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"dialog_root__1rU97\",\"content\":\"dialog_content__28Sao\",\"party\":\"dialog_party__1WKYc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"solution-display_root__3CP2X\",\"spacer\":\"solution-display_spacer__18nRm\",\"word\":\"solution-display_word__10BHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"splash_root__2Prvf\",\"card\":\"splash_card__1oslK\",\"actions\":\"splash_actions__OpTM6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"compound-word-display_root__3lhZf\",\"input\":\"compound-word-display_input__19Qtd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"how-to-play_root__OzdBH\",\"card\":\"how-to-play_card__2MGeo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"letter-input_root__QfAbd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"button_root__27uNe\"};","import uuid from \"uuid\";\n\nconst getUnsplashImage = ({ height, keyword, width }: { height: number; keyword: string; width: number }) => {\n  return {\n    height,\n    keyword,\n    url: `https://source.unsplash.com/random/${width}x${height}?${keyword},${uuid.v4()}`,\n    width\n  };\n};\n\nexport default getUnsplashImage;\n","import React from \"react\";\nimport getUnsplashImage from \"../../lib/get-unsplash-image\";\n\n/** Context **/\ninterface GameSettingsContextProps {\n  backgroundImage: string;\n}\n\nconst defaultValues: GameSettingsContextProps = {\n  backgroundImage: \"background-image.png\",\n};\n\nconst GameSettingsContext = React.createContext<GameSettingsContextProps>(\n  defaultValues\n);\n\n/** Provider **/\ninterface GameSettingsProviderProps {\n  children: React.ReactNode;\n  defaultValues?: GameSettingsContextProps;\n}\n\nexport const GameSettingsProvider: React.FC<GameSettingsProviderProps> = ({\n  children,\n}) => {\n  const [state, setState] = React.useState<GameSettingsContextProps>({\n    backgroundImage: defaultValues.backgroundImage,\n  });\n\n  React.useEffect(() => {\n    const backgroundImage = getUnsplashImage({\n      width: window.innerWidth,\n      height: window.innerHeight,\n      keyword: \"background\",\n    });\n    setState({ backgroundImage: backgroundImage.url });\n  }, []);\n\n  return (\n    <GameSettingsContext.Provider value={state}>\n      {children}\n    </GameSettingsContext.Provider>\n  );\n};\n\n/** Hook **/\nexport const useGameSettings = () => {\n  return React.useContext(GameSettingsContext);\n};\n","const listOfPairs: CompoundWord[] = [\n  [\"advent\", \"calendar\"],\n  [\"anger\", \"management\"],\n  [\"chocolate\", \"milk\"],\n  [\"christmas\", \"carols\"],\n  [\"christmas\", \"decoration\"],\n  [\"christmas\", \"present\"],\n  [\"christmas\", \"stockings\"],\n  [\"christmas\", \"tree\"],\n  [\"climate\", \"change\"],\n  [\"consumption\", \"trap\"],\n  [\"digestive\", \"schnapps\"],\n  [\"epiphany\", \"kings\"],\n  [\"fairy\", \"lights\"],\n  [\"Family\", \"disputes\"],\n  [\"gift\", \"exchange\"],\n  [\"holiday\", \"decoration\"],\n  [\"hot\", \"chocolate\"],\n  [\"mistletoe\", \"kiss\"],\n  [\"mulled\", \"wine\"],\n  [\"north\", \"pole\"],\n  [\"reindeer\", \"sleigh\"],\n  [\"road\", \"grit\"],\n  [\"saint\", \"nicholas\"],\n  [\"santa\", \"claus\"],\n  [\"snow\", \"chaos\"],\n  [\"social\", \"distancing\"],\n  [\"stomach\", \"pain\"],\n  [\"winter\", \"tires\"],\n];\n\nexport default listOfPairs;\n","import listOfPairs from \"../../service/pairs\";\n\nexport default function pairGenerator(): CompoundWord {\n  return listOfPairs[Math.floor(Math.random() * listOfPairs.length)];\n}\n","import React, { useCallback, useState } from \"react\";\nimport pairGenerator from \"../../lib/pair-generator\";\n\n/** Context **/\ntype GameStateContextProps = {\n  showHint: ActiveHint;\n  showSolver: ActiveSolver;\n  compoundWord: CompoundWord;\n};\n\ninterface GameStateContextApi extends GameStateContextProps {\n  toggleHint: () => void;\n  toggleSolver: () => void;\n  resetCompoundWord: () => void;\n}\n\nconst defaultErrorMessage = `Error: Context not initialized ${Date.now()}`;\n\nconst defaultValues: GameStateContextApi = {\n  showHint: false,\n  showSolver: false,\n  compoundWord: pairGenerator(),\n  toggleHint: () => {\n    throw Error(defaultErrorMessage);\n  },\n  toggleSolver: () => {\n    throw Error(defaultErrorMessage);\n  },\n  resetCompoundWord: () => {\n    throw Error(defaultErrorMessage);\n  },\n};\n\nconst GameStateContext = React.createContext<GameStateContextApi>(\n  defaultValues\n);\n\n/** Provider **/\ninterface GameStateProviderProps {\n  children: React.ReactNode;\n  defaultValues?: GameStateContextApi;\n}\n\nexport const GameStateProvider: React.FC<GameStateProviderProps> = ({\n  children,\n}) => {\n  const [state, setState] = useState<GameStateContextProps>({\n    showHint: defaultValues.showHint,\n    showSolver: defaultValues.showSolver,\n    compoundWord: defaultValues.compoundWord,\n  });\n\n  const toggleHint = useCallback(() => {\n    setState((oldState) => ({\n      ...oldState,\n      showHint: !oldState.showHint,\n    }));\n  }, [setState]);\n\n  const toggleSolver = useCallback(() => {\n    setState((oldState) => ({\n      ...oldState,\n      showSolver: !oldState.showSolver,\n    }));\n  }, [setState]);\n\n  const resetCompoundWord = useCallback(() => {\n    const newCompoundWord = pairGenerator();\n    setState((oldState) => ({\n      ...oldState,\n      compoundWord: newCompoundWord,\n    }));\n  }, [setState]);\n\n  return (\n    <GameStateContext.Provider\n      value={{\n        showHint: state.showHint,\n        showSolver: state.showSolver,\n        compoundWord: state.compoundWord,\n        toggleHint,\n        toggleSolver,\n        resetCompoundWord,\n      }}\n    >\n      {children}\n    </GameStateContext.Provider>\n  );\n};\n\n/** Hook **/\nexport const useGameState = () => {\n  return React.useContext(GameStateContext);\n};\n","import React from \"react\";\nimport { GameSettingsProvider } from \"./game-settings-context/game-settings-context\";\nimport { GameStateProvider } from \"./game-state-context/game-state-context\";\n\ninterface ContextProvidersProps {\n  children: React.ReactNode;\n}\n\nexport const ContextProviders: React.FC<ContextProvidersProps> = ({\n  children,\n}) => (\n  <React.Fragment>\n    <GameSettingsProvider>\n      <GameStateProvider>\n        <>{children}</>\n      </GameStateProvider>\n    </GameSettingsProvider>\n  </React.Fragment>\n);\n","import React from \"react\";\n\nimport style from \"./dialog.module.css\";\n\ninterface DialogProps {\n  title: string;\n  message: string | React.ReactNode;\n  close: () => void;\n  animate?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = ({ animate, close, message, title }) => {\n  return (\n    <div\n      className={style.root}\n      onClick={(e) => {\n        if (e.target === e.currentTarget) {\n          close();\n        }\n      }}\n    >\n      <div className={`${style.content} ${animate ? style.party : \"\"}`}>\n        <h3>{title}</h3>\n        {typeof message === \"string\" ? <h4>{message}</h4> : message}\n        <br />\n        <button autoFocus onClick={close}>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialog;\n","import React from \"react\";\nimport styles from \"./compound-word-display.module.css\";\n\ninterface CompoundWordDisplayProps {\n  word: string;\n}\n\nconst CompoundWordDisplay: React.FC<CompoundWordDisplayProps> = ({ word }) => {\n  const letters: string[] = word.split(\"\");\n  return (\n    <div className={styles.root}>\n      {letters.map((letter, index) => (\n        <input\n          key={index}\n          tabIndex={-1}\n          type=\"text\"\n          value={letter}\n          className={styles.input}\n          disabled={letter === \"*\"}\n          readOnly\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default CompoundWordDisplay;\n","import React from \"react\";\nimport CompoundWordDisplay from \"../compound-word-display/compound-word-display\";\n\ninterface HintDisplayProps {\n  secrets: string[];\n}\n\nconst HintDisplay: React.FC<HintDisplayProps> = ({ secrets }) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexWrap: \"wrap\",\n    }}\n  >\n    {secrets.map((secret, index) => (\n      <CompoundWordDisplay key={index} word={secret} />\n    ))}\n  </div>\n);\n\nexport default HintDisplay;\n","type GetHintFromWord = (\n  word: string,\n  amountOfHintChars?: number,\n  replace?: string\n) => string;\n\nconst getHintFromWord: GetHintFromWord = (\n  word,\n  amountOfHintChars = Math.floor(word.length / 3),\n  replace = \"*\"\n) => {\n  const chars = word.split(\"\");\n  let indices = chars.map((_, idx) => idx);\n  let hint = chars.map(() => replace);\n  for (let i = 0; i < amountOfHintChars; i++) {\n    const selectedIndex = indices[Math.floor(Math.random() * indices.length)];\n    hint[selectedIndex] = chars[selectedIndex].toUpperCase();\n    indices = indices.filter((index) => index !== selectedIndex);\n  }\n  return hint.join(\"\");\n};\n\nexport default getHintFromWord;\n","import getHintFromWord from \"./get-hint-from-word\";\n\ntype GetHintFromWords = (...words: string[]) => string[];\n\nconst getHintFromWords: GetHintFromWords = (...words) => {\n  const word1 = words[0];\n  const word2 = words[1];\n  return [getHintFromWord(word1), getHintFromWord(word2)];\n};\n\nexport default getHintFromWords;\n","import React, { useMemo } from \"react\";\nimport Dialog from \"../dialog/dialog\";\nimport HintDisplay from \"../hint-display/hint-display\";\nimport getHintFromWords from \"../../lib/get-hint-from-words\";\n\nexport interface HintProps {\n  words: CompoundWord;\n  onClose: () => void;\n}\n\nconst HintDialog: React.FC<HintProps> = ({\n  onClose: callback,\n  words: [first, second],\n}) => {\n  const hint = useMemo(() => getHintFromWords(first, second), [first, second]);\n  return (\n    <Dialog\n      close={callback}\n      title=\"It has something to do with:\"\n      message={<HintDisplay secrets={hint} />}\n    />\n  );\n};\n\nexport default HintDialog;\n","import React, { useEffect } from \"react\";\nimport HintDialog from \"../hint-dialog/hint-dialog\";\nimport { useGameState } from \"../../context/game-state-context/game-state-context\";\n\nconst HintButton: React.FC<any> = () => {\n  const { compoundWord, toggleHint, showHint, showSolver } = useGameState();\n\n  useEffect(() => {\n    const hKeyListener = (event: KeyboardEvent) => {\n      if (event.code === \"KeyH\" && !showSolver) {\n        toggleHint();\n      }\n    };\n    document.addEventListener(\"keydown\", hKeyListener);\n\n    return () => {\n      document.removeEventListener(\"keydown\", hKeyListener);\n    };\n  }, [toggleHint, showSolver]);\n\n  return (\n    <React.Fragment>\n      <button\n        tabIndex={showHint || !showSolver ? 0 : -1}\n        onClick={toggleHint}\n        disabled={showHint}\n        aria-label=\"Hint\"\n      >\n        Hint\n      </button>\n      {showHint && <HintDialog words={compoundWord} onClose={toggleHint} />}\n    </React.Fragment>\n  );\n};\n\nexport default HintButton;\n","import React from \"react\";\nimport styles from \"./letter-input.module.css\";\n\ninterface LetterInputProps {\n  disabled?: boolean;\n  letter: string | null;\n  onChange?: (newLetter: string) => void;\n  onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;\n}\n\nconst LetterInput = React.forwardRef<HTMLInputElement, LetterInputProps>(\n  (\n    { disabled = false, letter, onChange = undefined, onKeyDown = undefined },\n    ref\n  ) => {\n    return (\n      <input\n        className={styles.root}\n        disabled={disabled}\n        maxLength={1}\n        onKeyDown={onKeyDown}\n        onChange={onChange && ((event) => onChange(event.currentTarget.value))}\n        onFocus={(event) => {\n          event.currentTarget.setSelectionRange(0, 1);\n        }}\n        readOnly={!onChange}\n        ref={ref}\n        type=\"text\"\n        value={letter || \"\"}\n      />\n    );\n  }\n);\n\nexport default LetterInput;\n","import React from \"react\";\nimport { useGameState } from \"../../context/game-state-context/game-state-context\";\nimport Dialog from \"../dialog/dialog\";\n\ninterface ValidationDialogProps {\n  active: boolean;\n  solved: boolean;\n  onClose: () => void;\n}\n\nconst ValidationDialog: React.FC<ValidationDialogProps> = ({\n  active,\n  solved,\n  onClose,\n}) => {\n  const { compoundWord } = useGameState();\n  return (\n    <React.Fragment>\n      {active && (\n        <Dialog\n          animate={solved}\n          title={solved ? \"Yesss!\" : \"Nope...\"}\n          message={\n            solved\n              ? \"You solved this puzzle!\"\n              : `Sorry, the correct answer was: ${compoundWord.join(\" \")}`\n          }\n          close={onClose}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default ValidationDialog;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport LetterInput from \"../letter-input/letter-input\";\nimport ValidationDialog from \"../validation-dialog/validation-dialog\";\nimport { useHistory } from \"react-router-dom\";\nimport style from \"./solution-display.module.css\";\n\ninterface SolutionDisplayProps {\n  solution: string[];\n}\n\nconst SolutionDisplay: React.FC<SolutionDisplayProps> = ({ solution }) => {\n  const history = useHistory();\n  const [validate, setValidation] = useState<boolean>(false);\n\n  const verifyInput = () => {\n    return solution.join(\"\").toLowerCase() === userInput.join(\"\").toLowerCase();\n  };\n\n  const closeValidationDialog = () => {\n    history.go(0);\n  };\n\n  const letterRefs = useRef<HTMLInputElement[]>([]);\n\n  const addToRef = (element: HTMLInputElement | null) => {\n    if (element && !letterRefs.current.includes(element)) {\n      letterRefs.current.push(element);\n    }\n  };\n\n  const defaultUserInput = new Array(\n    solution[0].length + solution[1].length\n  ).fill(null);\n  const [userInput, setUserInput] = useState<(string | null)[]>(\n    defaultUserInput\n  );\n\n  useEffect(() => {\n    if (letterRefs.current.length > 0) {\n      letterRefs.current[0].focus();\n    }\n  }, []);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        setValidation(true);\n      }}\n    >\n      <div className={style.root}>\n        <div className={style.word}>\n          {defaultUserInput.map((_space, index) => {\n            return (\n              <React.Fragment key={index}>\n                {solution[0].length === index && (\n                  <span className={style.spacer} />\n                )}\n                <LetterInput\n                  disabled={validate}\n                  letter={userInput[index]}\n                  onChange={(letter) => {\n                    if (letter.length === 1) {\n                      setUserInput([\n                        ...userInput.slice(0, index),\n                        letter,\n                        ...userInput.slice(index + 1),\n                      ]);\n                      const nextChild =\n                        letterRefs.current[\n                          (index + 1) % letterRefs.current.length\n                        ];\n\n                      nextChild.focus();\n                    } else {\n                      setUserInput([\n                        ...userInput.slice(0, index),\n                        null,\n                        ...userInput.slice(index + 1),\n                      ]);\n                    }\n                  }}\n                  onKeyDown={(event) => {\n                    if (\n                      event.keyCode === 46 /* delete */ ||\n                      event.keyCode === 8 /* backspace */\n                    ) {\n                      // focus before\n                      event.preventDefault();\n                      setUserInput([\n                        ...userInput.slice(0, index),\n                        null,\n                        ...userInput.slice(index + 1),\n                      ]);\n\n                      const previousChild =\n                        letterRefs.current[\n                          (letterRefs.current.length + index - 1) %\n                            letterRefs.current.length\n                        ];\n\n                      previousChild.focus();\n                    }\n                  }}\n                  ref={addToRef}\n                />\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n      <br />\n      <button\n        type=\"submit\"\n        aria-label=\"Verify your answer\"\n        tabIndex={validate ? -1 : 0}\n      >\n        Solve\n      </button>\n      <ValidationDialog\n        active={validate}\n        solved={verifyInput()}\n        onClose={closeValidationDialog}\n      />\n    </form>\n  );\n};\n\nexport default SolutionDisplay;\n","import React from \"react\";\nimport Dialog from \"../dialog/dialog\";\nimport SolutionDisplay from \"../solution-display/solution-display\";\n\nexport interface SolutionProps {\n  solution: CompoundWord;\n  onClose: () => void;\n}\nconst SolutionDialog: React.FC<SolutionProps> = ({ onClose: callback, solution }) => {\n  return (\n    <Dialog\n      close={callback}\n      title=\"What's the compound word?\"\n      message={<SolutionDisplay solution={solution} />}\n    />\n  );\n};\n\nexport default SolutionDialog;\n","import React from \"react\";\nimport { useGameState } from \"../../context/game-state-context/game-state-context\";\nimport SolutionDialog from \"../solution-dialog/solution-dialog\";\n\nconst SolutionButton: React.FC<any> = () => {\n  const { compoundWord, toggleSolver, showHint, showSolver } = useGameState();\n  return (\n    <React.Fragment>\n      <button\n        tabIndex={!showHint || showSolver ? 0 : -1}\n        onClick={toggleSolver}\n        disabled={showSolver}\n        aria-label=\"Solve\"\n      >\n        Solve\n      </button>\n      {showSolver && (\n        <SolutionDialog onClose={toggleSolver} solution={compoundWord} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default SolutionButton;\n","import React from \"react\";\n\ninterface ImageProps {\n  src: string;\n  height: number;\n  width: number;\n}\n\nconst Image: React.FC<ImageProps> = ({ src, width, height }) => {\n  return (\n    <img\n      src={src}\n      width={width}\n      height={height}\n      alt=\"hmm.\"\n      style={{ margin: \"0 auto\" }}\n    />\n  );\n};\n\nexport default Image;\n","const getWindowSize: () => [number, number] = () => {\n  return [window.innerHeight, window.innerWidth];\n};\n\nexport default getWindowSize;\n","import { default as fallbackGetWindowSize } from \"../../service/get-window-size\";\nimport { default as fallbackGetUnsplashImage } from \"../get-unsplash-image\";\n\nconst retrieveImages = (\n  compoundWord: [string, string],\n  getWindowSize = fallbackGetWindowSize,\n  getUnsplashImage = fallbackGetUnsplashImage\n) => {\n  const [height, width] = getWindowSize();\n\n  const sizeX = width > 600 ? Math.ceil(width / 2) : width;\n  const sizeY = Math.ceil(height / 2);\n\n  return compoundWord.map((keyword) =>\n    getUnsplashImage({\n      height: sizeY,\n      keyword: keyword,\n      width: sizeX,\n    })\n  );\n};\n\nexport default retrieveImages;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./button.module.css\";\n\ninterface ButtonProps {\n  to: string;\n  label: string;\n}\n\nconst Button: React.FC<ButtonProps> = ({ to, label }) => (\n  <Link to={to} className={styles.root}>\n    {label}\n  </Link>\n);\n\nexport default Button;\n","import React, { useMemo } from \"react\";\nimport { useGameState } from \"../../context/game-state-context/game-state-context\";\nimport HintButton from \"../hint-button/hint-button\";\nimport SolutionButton from \"../solution-button/solution-button\";\nimport Image from \"../image/image\";\nimport retrieveImages from \"../../lib/retrieve-images/retrieve-images\";\nimport Button from \"../button/button\";\n\nconst Game: React.FC = () => {\n  const { compoundWord } = useGameState();\n\n  const images = useMemo(() => {\n    return retrieveImages(compoundWord);\n  }, [compoundWord]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <div style={{ textAlign: \"center\" }}>\n        {images.map((image, index) => (\n          <Image\n            key={index}\n            src={image.url}\n            width={image.width * 0.8}\n            height={image.height * 0.8}\n          />\n        ))}\n      </div>\n      <div>\n        <SolutionButton />\n        <HintButton />\n      </div>\n      <Button to={\"/\"} label={\"Exit\"} />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer>\n    developed by{\" \"}\n    <a href=\"https://compose.us\" rel=\"noreferrer noopener\" target=\"_blank\">\n      compose.us\n    </a>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport styles from \"./how-to-play.module.css\";\nimport logo from \"../../images/logo.png\";\nimport Button from \"../button/button\";\nimport Footer from \"../layout/partial/footer/footer\";\nimport { useGameSettings } from \"../../context/game-settings-context/game-settings-context\";\n\ninterface HowToPlayProps {}\n\nconst HowToPlay: React.FC<HowToPlayProps> = () => {\n  const { backgroundImage } = useGameSettings();\n  return (\n    <div\n      className={styles.root}\n      style={{\n        backgroundImage: `url(\"${backgroundImage}\")`,\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <div className={styles.card}>\n        {/* Disable warning as the game is called \"Image Fun\" */}\n        {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\n        <img src={logo} alt=\"Image Fun\" />\n      </div>\n      <article>\n        <h1>How To Play</h1>\n        <p>Find out how well you know your open compound words.</p>\n        <section>\n          <h2>Objective:</h2>\n          <p>\n            Start by looking at the two images provided and try to figure out\n            which compound word the two images refer to.\n          </p>\n        </section>\n        <section>\n          <h2>Game Play</h2>\n          <p>\n            When you think you know what the compound word is, click on the\n            \"Solve\" button and enter your answer.\n          </p>\n          <p>\n            If you're having trouble figuring it out, click on the \"Hint\" button\n            to see few random letters to help you solve it.\n          </p>\n        </section>\n      </article>\n      <Button to={\"/\"} label=\"Back\" />\n      <Footer />\n    </div>\n  );\n};\n\nexport default HowToPlay;\n","import React from \"react\";\nimport styles from \"./splash.module.css\";\nimport logo from \"../../images/logo.png\";\nimport Button from \"../button/button\";\nimport Footer from \"../layout/partial/footer/footer\";\nimport { useGameSettings } from \"../../context/game-settings-context/game-settings-context\";\n\ninterface SplashProps {}\n\nconst Splash: React.FC<SplashProps> = () => {\n  const { backgroundImage } = useGameSettings();\n  return (\n    <div\n      className={styles.root}\n      style={{\n        backgroundImage: `url(\"${backgroundImage}\")`,\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <div>\n        <div className={styles.card}>\n          {/* Disable warning as the game is called \"Image Fun\" */}\n          {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\n          <img src={logo} alt=\"Image Fun\" />\n        </div>\n        <div className={styles.actions}>\n          <Button to=\"/game\" label=\"Start Game\" />\n          <Button to=\"/how-to-play\" label=\"How to Play\" />\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Splash;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Game from \"../game/game\";\nimport HowToPlay from \"../how-to-play/how-to-play\";\nimport Splash from \"../splash/splash\";\n\nconst AppSwitch = () => (\n  <main>\n    <Switch>\n      <Route path=\"/game\">\n        <Game />\n      </Route>\n      <Route path=\"/how-to-play\">\n        <HowToPlay />\n      </Route>\n      <Route path=\"/\">\n        <Splash />\n      </Route>\n    </Switch>\n  </main>\n);\n\nexport default AppSwitch;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Game is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\nimport { ContextProviders } from \"./context/context-providers\";\nimport { HashRouter } from \"react-router-dom\";\nimport AppSwitch from \"./component/app-switch/app-switch\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProviders>\n      <HashRouter>\n        <AppSwitch />\n      </HashRouter>\n    </ContextProviders>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}